const MATRIX = [
	 [
 	[
 		[2, 0, 0],
 		[2, 2, 0],
 		[0, 2, 0],
 	],
 	[
 		[0, 0, 0],
 		[0, 2, 2],
 		[2, 2, 0],
 	],
 	[
 		[0, 2, 0],
 		[0, 2, 2],
 		[0, 0, 2],
 	],
 	[
 		[0, 2, 2],
 		[2, 2, 0],
 		[0, 0, 0],
 	],
 ],
 [
 	[
 		[0, 3, 0],
 		[0, 3, 0],
 		[3, 3, 0]
 	],
  [
 		[0, 0, 0],
 		[3, 3, 3],
 		[0, 0, 3],
 	],
 	[
 		[0, 3, 3],
 		[0, 3, 0],
 		[0, 3, 0]
 	],
 	[
 		[3, 0, 0],
 		[3, 3, 3],
 		[0, 0, 0]
 	],

 ],
 [
 	[
 		[4, 4],
 		[4, 4],
 	],
 	[
 		[4, 4],
 		[4, 4],
 	],
 	[
 		[4, 4],
 		[4, 4],
 	],
 	[
 		[4, 4],
 		[4, 4],
 	]
 ],
  [
 	[
 		[0, 5, 0],
 		[5, 5, 0],
 		[5, 0, 0]
 	],
 	[
 		[0, 0, 0],
 		[5, 5, 0],
 		[0, 5, 5],
 	],
 	[
 		[0, 0, 5],
 		[0, 5, 5],
 		[0, 5, 0],
 	],
 	[
 		[5, 5, 0],
 		[0, 5, 5],
 		[0, 0, 0],
 	],
 ],
 [
  [
   [0, 6, 0, 0],
   [0, 6, 0, 0],
   [0, 6, 0, 0],
   [0, 6, 0, 0],
  ],
  [
   [0, 0, 0, 0],
   [0, 0, 0, 0],
   [6, 6, 6, 6],
   [0, 0, 0, 0]
  ],
  [
   [0, 0, 6, 0],
   [0, 0, 6, 0],
   [0, 0, 6, 0],
   [0, 0, 6, 0]
  ],
  [
   [0, 0, 0, 0],
   [6, 6, 6, 6],
   [0, 0, 0, 0],
   [0, 0, 0, 0]
  ]
 ],
 [
 	[
 		[7, 7, 0],
 		[0, 7, 0],
 		[0, 7, 0],
 	],
 	[
 		[0, 0, 0],
 		[7, 7, 7],
 		[7, 0, 0],
 	],
 	[
 		[0, 7, 0],
 		[0, 7, 0],
 		[0, 7, 7],
 	],
 	[
 		[0, 0, 7],
 		[7, 7, 7],
 		[0, 0, 0],
 	],
 ],
 [
 	[
 		[0, 8, 0],
 		[8, 8, 0],
 		[0, 8, 0],
 	],
 	[
 		[0, 0, 0],
 		[8, 8, 8],
 		[0, 8, 0],
 	],
 	[
 		[0, 8, 0],
 		[0, 8, 8],
 		[0, 8, 0],
 	],
 	[
 		[0, 8, 0],
 		[8, 8, 8],
 		[0, 0, 0],
 	],
 ],


];

const WK_SRSX = {
	I: {
		right: [
        [[0, 0], [-2, 0], [+1, 0], [-2, +1], [+1, -2]],
        [[0, 0], [-1, 0], [+2, 0], [-1, -2], [+2, +1]],
        [[0, 0], [+2, 0], [-1, 0], [+2, -1], [-1, +2]],
        [[0, 0], [+1, 0], [-2, 0], [+1, +2], [-2, -1]],
      ],
		left: [
        [[0, 0], [-1, 0], [+2, 0], [-1, -2], [+2, +1]],
        [[0, 0], [+2, 0], [-1, 0], [+2, -1], [-1, +2]],
        [[0, 0], [+1, 0], [-2, 0], [+1, +2], [-2, -1]],
        [[0, 0], [-2, 0], [+1, 0], [-2, +1], [+1, -2]],
      ],
		double: [
        [[0, 0], [-1, 0], [-2, 0], [+1, 0], [+2, 0], [0, +1]],
        [[0, 0], [0, +1], [0, +2], [0, -1], [0, -2], [-1, 0]],
        [[0, 0], [+1, 0], [+2, 0], [-1, 0], [-2, 0], [0, -1]],
        [[0, 0], [0, +1], [0, +2], [0, -1], [0, -2], [+1, 0]],
      ],
	},
	other: {
		right: [
  [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2]],
  [[0, 0], [1, 0], [1, 1], [0, -2], [1, -2]],
  [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],
  [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2]]],
		left: [
  [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2]],
  [[0, 0], [1, 0], [1, 1], [0, -2], [1, -2]],
  [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2]],
  [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2]]],
		double: [
  [[0, 0], [1, 0], [2, 0], [1, 1], [2, 1], [-1, 0], [-2, 0], [-1, 1], [-2, 1], [0, -1], [3, 0], [-3, 0], [0, 0]],
  [[0, 0], [0, 1], [0, 2], [-1, 1], [-1, 2], [0, -1], [0, -2], [-1, -1], [-1, -2], [1, 0], [0, 3], [0, -3], [0, 0]],
  [[0, 0], [-1, 0], [-2, 0], [-1, -1], [-2, -1], [1, 0], [2, 0], [1, -1], [2, -1], [0, 1], [-3, 0], [3, 0], [0, 0]],
  [[0, 0], [0, 1], [0, 2], [1, 1], [1, 2], [0, -1], [0, -2], [1, -1], [1, -2], [-1, 0], [0, 3], [0, -3], [0, 0]]],
	},
	O: {
		right: [
  [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2], [0, 3], [-1, 3], [0, 0]],
  [[0, 0], [1, 0], [1, 1], [0, -2], [1, -2], [0, -3], [1, -3], [0, 0]],
  [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2], [0, 3], [1, 3], [0, 0]],
  [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2], [0, 3], [-1, -3], [0, 0]]],
		left: [
  [[0, 0], [1, 0], [1, -1], [0, 2], [1, 2], [0, 3], [1, 3], [0, 0]],
  [[0, 0], [1, 0], [1, 1], [0, -2], [1, -2], [0, -3], [1, -3], [0, 0]],
  [[0, 0], [-1, 0], [-1, -1], [0, 2], [-1, 2], [0, 3], [-1, 3], [0, 0]],
  [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2], [0, 3], [-1, -3], [0, 0]]],
		double: [
  [[0, 0], [1, 0], [2, 0], [1, 1], [2, 1], [-1, 0], [-2, 0], [-1, 1], [-2, 1], [0, -1], [3, 0], [-3, 0], [0, 0]],
  [[0, 0], [0, 1], [0, 2], [-1, 1], [-1, 2], [0, -1], [0, -2], [-1, -1], [-1, -2], [1, 0], [0, 3], [0, -3], [0, 0]],
  [[0, 0], [-1, 0], [-2, 0], [-1, -1], [-2, -1], [1, 0], [2, 0], [1, -1], [2, -1], [0, 1], [-3, 0], [3, 0], [0, 0]],
  [[0, 0], [0, 1], [0, 2], [1, 1], [1, 2], [0, -1], [0, -2], [1, -1], [1, -2], [-1, 0], [0, 3], [0, -3], [0, 0]]],
	},

};

//[propPos][rot][points]

const SPIN_DETECTION = {
		I: {
			highX: [[1, 2, 2, 1], [1, 3, 1, 3], [1, 2, 2, 1], [0, 2, 0, 2]],
			highY: [[0, 2, 0, 2], [1, 2, 2, 1], [1, 3, 1, 3], [1, 2, 2, 1]],
			lowX: [[-1, 4, -1, 4], [2, 2, 2, 2], [-1, 4, -1, 4], [1, 1, 1, 1]],
			lowY: [[1, 1, 1, 1], [-1, 4, -1, 4], [2, 2, 2, 2], [-1, 4, -1, 4]]
		},
		J: {
			highX: [[1, 2], [2, 2], [1, 0], [0, 0]],
			highY: [[0, 0], [1, 2], [2, 2], [1, 0]],
			lowX: [[0, 2], [0, 0], [2, 0], [2, 2]],
			lowY: [[2, 2], [0, 2], [0, 0], [2, 0]]
		},
		L: {
			highX: [[1, 0], [2, 2], [1, 2], [0, 0]],
			highY: [[0, 0], [1, 0], [2, 2], [1, 2]],
			lowX: [[2, 0], [0, 0], [0, 2], [2, 2]],
			lowY: [[2, 2], [2, 0], [0, 0], [0, 3]]
		},
		O: {
			highX: [[0, 1], [2, 2], [1, 0], [-1, -1]],
			highY: [[-1, -1], [0, 1], [2, 2], [1, 0]],
			lowX: [[1, 0], [-1, -1], [0, 1], [2, 2]],
			lowY: [[2, 2], [1, 0], [-1, -1], [0, 1]]
		},
		S: {
			highX: [[0, 2], [1, 2], [2, 0], [1, 0]],
			highY: [[0, 1], [2, 0], [2, 1], [0, 2]],
			lowX: [[0, -1], [1, 2], [-1, 3], [1, 0]],
			lowY: [[0, 1], [-1, 3], [2, 1], [3, -1]]
		},
		T: {
			highX: [[0, 2], [2, 2], [0, 2], [0, 0]],
			highY: [[0, 0], [0, 2], [2, 2], [0, 2]],
			lowX: [[0, 2], [0, 0], [0, 2], [2, 2]],
			lowY: [[2, 2], [0, 2], [0, 0], [0, 2]]
		},
		Z: {
			highX: [[2, 0], [2, 1], [0, 2], [0, 1]],
			highY: [[0, 1], [2, 0], [2, 1], [0, 2]],
			lowX: [[-1, 3], [2, 1], [3, -1], [0, 1]],
			lowY: [[0, 1], [-1, 3], [2, 1], [3, -1]]
		},
	},
	SPAWN_OFFSETS = {
		Z: [3, 0],
		L: [3, 0],
		O: [4, 0],
		S: [3, 0],
		I: [3, 0],
		J: [3, 0],
		T: [3, 0],
	};

const FLAG_DIRECTIONS = [
  [1, 0],
  [0, 1],
  [-1, 0],
  [0, -1]
 ];

const FLAG_CONNECTIONS = {
	color: 255,
	up: 256,
	right: 512,
	down: 1024,
	left: 2048
}

const PIECE = (function() {
	var a = [];
	var b = ["Z", "L", "O", "S", "I", "J", "T"];
	for (let i = 0; i < 7; i++) {
		a.push({
			index: i,
			x: SPAWN_OFFSETS[b[i]][0],
			y: SPAWN_OFFSETS[b[i]][1],
			matrix: MATRIX[i],
			kickTable: WK_SRSX[b[i] == "I" ? "I" : (b[i] == "O" ? "O" : "other")],
			spinDetection: SPIN_DETECTION[b[i]]
		});
	}
	return a;
})();

//navigator.clipboard.writeText(JSON.stringify(PIECE))

const BLOBS = (function() {

	let pp = function(c, d) {
		let ma = [[
    [
     [0, 0, 0],
     [c, d, 0],
     [0, 0, 0]
    ],
    [
     [0, 0, 0],
     [0, d, 0],
     [0, c, 0]
    ],
    [
     [0, 0, 0],
     [0, d, c],
     [0, 0, 0]
    ],
    [
     [0, c, 0],
     [0, d, 0],
     [0, 0, 0]
    ]
   ], [
       [
        [0, 0, 0],
        [c, d, 0],
        [0, d, 0]
       ],
       [
        [0, 0, 0],
        [0, d, d],
        [0, c, 0]
       ],
       [
        [0, d, 0],
        [0, d, c],
        [0, 0, 0]
       ],
       [
        [0, c, 0],
        [d, d, 0],
        [0, 0, 0]
       ]
      ],
[
       [
        [0, 0, 0],
        [d, d, 0],
        [0, c, 0]
       ],
       [
        [0, 0, 0],
        [0, d, c],
        [0, d, 0]
       ],
       [
        [0, c, 0],
        [0, d, d],
        [0, 0, 0]
       ],
       [
        [0, d, 0],
        [c, d, 0],
        [0, 0, 0]
       ]
      ],
[
       [
        [0, 0, 0],
        [c, c, 0],
        [d, d, 0]
       ],
       [
        [0, 0, 0],
        [c, d, 0],
        [c, d, 0]
       ],
       [
        [0, 0, 0],
        [d, d, 0],
        [c, c, 0]
       ],
       [
        [0, 0, 0],
        [d, c, 0],
        [d, c, 0]
       ]
      ],
      [
             [
                           [0, 0, 0],
                           [d, d, 0],
                           [d, d, 0],
                          ],
             [
              [0, 0, 0],
              [d, d, 0],
              [d, d, 0],
             ],
                          [
                           [0, 0, 0],
                           [d, d, 0],
                           [d, d, 0],
                          ],
                                       [
                                         [0, 0, 0],
                                        [d, d, 0],
                                        [d, d, 0],
                                       ]
            ]
      ][0];
		return ma;
	}



	let color1Bag = [];
	let color2Bag = [];
	let color3Bag = [];
	let main = [];

	let index = 0;

	for (let a = 1; a <= 5; a++) {
		for (let b = 1; b <= 5; b++) {

			let c = a + 0;
			let d = b + 0;

			main.push({
				index: index,
				matrix: pp(c, d),
				cp1: c,
				cp2: d,
				x: 3,
				y: 0,
				kickTable: {
					right: [
  [[0, 0], [-1, 0], [0, -1], [-1, -1], [-1, 0]],
  [[0, 0], [0, -1], [0, -1], [1, 0], [0, -1]],
  [[0, 0], [1, 0], [0, -1], [1, -1], [1, 0]],
  [[0, 0], [0, -1], [0, -1], [-1, 0], [0, -1]],
  ],
					left: [
  [[0, 0], [1, 0], [0, -1], [1, -1], [1, 0]],
  [[0, 0], [0, -1], [0, -1], [-1, 0], [0, -1]],
  [[0, 0], [-1, 0], [0, -1], [-1, -1], [-1, 0]],
  [[0, 0], [0, -1], [0, -1], [1, 0], [0, -1]],
  ],
					double: [
  [[0, 0], [0, 1]],
  [[0, 0], [0, 1]],
  [[0, 0], [0, 2]],
  [[0, 0], [0, 2]]
  ]
				},
			});
			color3Bag.push(index);
			if (a <= 3 && b <= 3) {
				color1Bag.push(index);
			}
			if (a <= 4 && b <= 4) {
				color2Bag.push(index);
			}
			index++;

		}
	}

	return {
		main: main,
		c1: color1Bag,
		c2: color2Bag,
		c3: color3Bag
	};

})();

const COLOR_BONUS = [[0, 3, 6, 12, 24, 48], [0, 2, 4, 6, 8, 10]];
const GROUP_BONUS = [[0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 10], [0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 8]];
const TSU_CHAIN_POWER = [0, 8, 16, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640, 672, 699];

/*//console.log(JSON.stringify(BLOBS.main.map((a) => {
 /*return {
  /*c1: a.cp1,
  c2: a.cp2,
  i: a.index
  
 };
 
 return a.matrix
}))) /**/

const TSU_CHAIN_SEQUENCE = {
	normal: ["init1", "init2", "spell1", "spell2", "spell3", "spell4", "spell5"],
	old: ["init1", "spell1", "spell2", "init5", "spell3", "spell4", "spell5"]
};

const CHAIN_SEQUENCE = [
 ["init1"],
 ["init1", "spell1"],
 ["init1", "init2", "spell1"],
 ["init1", "init2", "init3", "spell2"],
 ["init1", "init2", "init3", "init4", "spell2"],
 ["init1", "init2", "init3", "init4", "init5", "spell2"],
 ["init1", "init2", "init3", "init4", "init5", "init5", "spell3"],
 ["init1", "init2", "init3", "init4", "init5", "init5", "init5", "spell3"],
 ["init1", "init2", "init3", "init4", "spell2", "init5", "init5", "init5", "spell3"],
 ["init1", "init2", "init3", "init4", "spell2", "init4", "init5", "init5", "init5", "spell4"],
 ["init1", "init2", "init3", "init4", "spell2", "init3", "init4", "init5", "init5", "init5", "spell4"],
 ["init1", "init2", "init3", "init5", "spell2", "init3", "init4", "init5", "spell3", "init5", "init5", "spell4"],
 ["init1", "init2", "init3", "init5", "spell2", "init3", "init4", "init5", "spell3", "init5", "init5", "init5", "spell5"],
 ["init1", "init2", "init3", "init5", "spell2", "init2", "init3", "init4", "init5", "spell3", "init4", "init5", "init5", "spell5"],
 ["init1", "init2", "init3", "init5", "spell2", "init2", "init3", "init4", "init5", "spell3", "init3", "init4", "init5", "init5", "spell5"],
 ["init1", "init2", "init3", "init4", "init5", "spell2", "init2", "init4", "init5", "spell3", "init2", "init3", "init4", "init5", "init5", "spell5"],
 ["init1", "init2", "init3", "init4", "init5", "spell2", "init2", "init3", "init4", "init5", "spell3", "init2", "init3", "init4", "init5", "init5", "spell5"],
 ["init1", "init2", "init3", "init4", "init5", "spell2", "init2", "init3", "init4", "init5", "spell3", "init2", "init3", "init4", "init5", "init5", "init5", "spell5"],
 ["init1", "init2", "init3", "init4", "init5", "spell2", "init2", "init3", "init4", "init5", "spell3", "init2", "init3", "init4", "init3", "init4", "init5", "init5", "spell5"],
 ["init1", "init2", "init3", "init4", "init5", "spell2", "init2", "init3", "init4", "init5", "spell3", "init2", "init3", "init4", "init3", "init4", "init5", "init5", "init5", "spell5"],

 ["init5", "init2", "init3", "init4", "init5", "spell2", "init2", "init3", "init4", "init5", "spell3", "init2", "init3", "init4", "init3", "init4", "init5", "init5", "init5", "spell5"],
 ["init1", "init2", "init3", "init4", "init5", "spell2", "init2", "init3", "init4", "init5", "spell3", "init2", "init3", "init4", "init3", "init4", "init5", "init5", "init5", "spell5"],
];


(function() {
	let width = 6,
		height = 14,
		hiddenHeight = 2,
		visibleHeight = 12;
	let matrix = [
    [
     [0, 0, 0],
     [2, 2, 0],
     [0, 0, 0]
    ],
    [
     [0, 0, 0],
     [0, 2, 0],
     [0, 1, 0]
    ],
    [
     [0, 0, 0],
     [0, 2, 1],
     [0, 0, 0]
    ],
    [
     [0, 1, 0],
     [0, 2, 0],
     [0, 0, 0]
    ]
   ];

	let possibleMoves = [];

	let valid = (m, x, y, px, py) => {
		let cx = x + px,
			cy = y + py;
		for (let lx = 0; lx < m.length; lx++) {
			for (let ly = 0; ly < m[lx].length; ly++) {
				if (m[lx][ly] && (
						lx + cx < 0 ||
						lx + cx >= width
					)) return false;
			}
		}
		return true;
	};

	for (let rot = 0; rot < 4; rot++) {
		let mx = 3,
			my = 0;
		for (let dir of [1, -1]) {

		}
	}

	////console.log(possibleMoves);
})();

(function() {
	let int8 = [];
	int8.length = (BLOBS.main.length * 4 * 3 * 3);
	for (let i = 0; i < BLOBS.main.length; i++) {
		for (let r = 0; r < 4; r++) {
			for (let x = 0; x < 3; x++) {
				for (let y = 0; y < 3; y++) {
					int8[(i * 4 * 3 * 3) + (r * 3 * 3) + (x * 3) + y] = BLOBS.main[i].matrix[r][x][y];
				}
			}
		}
	}
	////console.log(JSON.stringify(int8))

})();

const SCORE_TABLE = {
	pc: {
		b2b: {
			spin: [0, 2300, 3500, 5400],
			mini: [0, 1500, 2100, 2400],
			line: [0, 0, 0, 0, 3200, 4200],
		},
		nob2b: {
			spin: [0, 1200, 2400, 3600],
			mini: [0, 1000, 1400, 1800],
			line: [0, 800, 1200, 1800, 2000, 2800],
		}
	},
	nopc: {
		b2b: {
			spin: [400, 1200, 1600, 2400],
			mini: [100, 300, 600, 900],
			line: [0, 0, 0, 0, 1200, 1900],
		},
		nob2b: {
			spin: [400, 800, 1200, 1600],
			mini: [100, 200, 400, 600],
			line: [0, 100, 300, 500, 800, 1400],
		}
	},
	combo: 50,
};

const ALL_CLEAR_ANIMATION_PRESETS = {
	1: [true, [1, 1], [0, 1], 40, {
		y1: 0,
		y2: 0.9,
		y3: 1,
		y4: 1,
		s1: 0,
		s2: 0.9,
		s3: 1,
		s4: 1
	}],
	2: [false, [0, 1], [1, 1], 40, {
		y1: 0,
		y2: 0,
		y3: 0,
		y4: 1,
		s1: 0,
		s2: 0.9,
		s3: 1,
		s4: 1
	}],
	3: [false, [1, 1], [0.3, 1], -1, {
		y1: 0,
		y2: 0,
		y3: 0,
		y4: 1,
		s1: 0,
		s2: 0.9,
		s3: 1,
		s4: 1
	}],

}